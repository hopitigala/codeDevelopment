program vorticityprogram
  USE channhdvariables
  USE mainparameters
  USE writedata
  USE arrayops
  USE readdata
  USE mpivariables
  USE prelimcalvar
  USE interpoldata
  USE mpi
  use vorticity
  use fluctuations
  IMPLICIT NONE
  REAL*8,ALLOCATABLE,DIMENSION(:)::yp,xp,zp,ypdo,ysdo,ys
  REAL*8,ALLOCATABLE,DIMENSION(:,:,:)::wxtavg,wytavg,wztavg,pp,dudy3
  REAL*8,ALLOCATABLE,DIMENSION(:,:,:)::wxprime,wyprime,wzprime
  REAL*8,ALLOCATABLE,DIMENSION(:,:,:)::wxprime2,wyprime2,wzprime2
  REAL*8,ALLOCATABLE,DIMENSION(:,:,:)::wxrms,wyrms,wzrms
  REAL*8,ALLOCATABLE,DIMENSION(:,:)::wxrmstx,wyrmstx,wzrmstx 
  REAL*8,ALLOCATABLE,DIMENSION(:)::wxrmstxz,wyrmstxz,wzrmstxz
  REAL*8,ALLOCATABLE,DIMENSION(:,:,:,:)::up,tp,omega,dudx,dudy,dudz
  INTEGER::dt,timestcount,numtimesteps,i,j,k,itime
  integer:: icorlavg,icen
  REAL*8::inv,sttime
  character*2::prosnum
  CALL MPI_INIT(ierr)
  CALL MPI_COMM_RANK(MPI_COMM_WORLD,mynode,ierr)
  CALL MPI_COMM_SIZE(MPI_COMM_WORLD,numprocs,ierr)
  

  CALL readChannelData()
  CALL readPostData(sttime,numtimesteps,dt,icorlavg,icen)
  CALL prelimCal()
  
  ALLOCATE(xp(n3),yp(0:n2),zp(n1),ys(0:n2),ypdo(0:n2do+1),ysdo(0:n2do+1))
  CALL readCoordData(xp,yp,zp)
  CALL intpolCordi(mynode,numprocs,yp,ys,ypdo,ysdo)

  
  ALLOCATE(wxtavg(n1,n2do+1,n3),wytavg(n1,n2do+1,n3),&
       wztavg(n1,n2do+1,n3),dudy3(n1,n2do+1,n3))

  timestcount=0
  wxtavg=0.0
  wytavg=0.0
  wztavg=0.0
  dudy3=0.0
  ! Time loop starts to read data from field.data files
  stime=MPI_WTIME()
  DO ITime= INT(stTime),(INT(StTime)+(NumTimeSteps*Dt)),Dt
     TimeStCount=TimeStcount+1

     allocate(up(n1,n2do+1,n3,3),tp(n1,n2do+1,n3,1),pp(n1,n2do+1,n3))
     CALL readTempFieldData(mynode,itime,ypdo,ysdo,up,pp,tp)
     deallocate(pp,tp)

     allocate(dudx(n1,n2do+1,n3,3),dudy(n1,n2do+1,n3,3),dudz(n1,n2do+1,n3,3))
     call velograd(up,xp,ypdo,zp,dudx,dudy,dudz)
     deallocate(up)
     
     allocate(omega(n1,n2do+1,n3,3))
     call instvorticity(dudz,dudy,dudx,omega)
    
     CALL loopAdd3DAry(omega(:,:,:,1),wztavg)
     CALL loopAdd3DAry(omega(:,:,:,2),wytavg)
     CALL loopAdd3DAry(omega(:,:,:,3),wxtavg)
     CALL loopAdd3DAry(dudy(:,:,:,3),dudy3)
     deallocate(omega,dudx,dudy,dudz)
  END DO
  etime=MPI_WTIME()
  write(*,*)'time elapsed for data read',etime-stime,'for process',mynode
  write(*,*)'no of time steps',timestcount,'read from process',mynode

  inv=1.0/real(timestcount)

  ! Computing time average


  wxtavg=inv*wxtavg
  wytavg=inv*wytavg
  wztavg=inv*wztavg
  dudy3=inv*dudy3
  

  ! time mean without spatial averages.
  !write(prosnum,'(i2.2)')mynode
  !call write3Darray(wxtavg,'wxmean'//trim(prosnum),'unformatted')
  !call write3Darray(wytavg,'wymean'//trim(prosnum),'unformatted')
  !call write3Darray(wztavg,'wzmean'//trim(prosnum),'unformatted')  
  !call write3Darray(dudy3,'dudy3'//trim(prosnum),'unformatted')

  ! if blowing is not activated spatial averages can be taken in both
  ! -x and -y directions
  call sendrecv3dwrite(wxtavg,1,'wxmean_3d.dat')
  call sendrecv3dwrite(wytavg,2,'wymean_3d.dat')
  call sendrecv3dwrite(wztavg,3,'wzmean_3d.dat')
  call sendrecv3dwrite(dudy3,4,'dudy3mean_3d.dat')

  !deallocate(wxtavg,wytavg,wztavg,dudy3)

  !allocate(wxtavg(n1,n2do+1,n3),wytavg(n1,n2do+1,n3),wztavg(n1,n2do+1,n3))


! This part of the code computes rms of vorticity fluctuations

  !call read3Darray('wxmean'//trim(prosnum),'unformatted',wxtavg)
  !call read3Darray('wymean'//trim(prosnum),'unformatted',wytavg)
  !call read3Darray('wzmean'//trim(prosnum),'unformatted',wztavg)

  allocate(wxrms(n1,n2do+1,n3),wyrms(n1,n2do+1,n3),wzrms(n1,n2do+1,n3))

  timestcount=0
  wxrms=0.0
  wyrms=0.0
  wzrms=0.0
  
  DO ITime= INT(stTime),(INT(StTime)+(NumTimeSteps*Dt)),Dt
     TimeStCount=TimeStcount+1

     allocate(up(n1,n2do+1,n3,3),tp(n1,n2do+1,n3,1),pp(n1,n2do+1,n3))
     CALL readTempFieldData(mynode,itime,ypdo,ysdo,up,pp,tp)
     deallocate(pp,tp)

     allocate(dudx(n1,n2do+1,n3,3),dudy(n1,n2do+1,n3,3),dudz(n1,n2do+1,n3,3))
     call velograd(up,xp,ypdo,zp,dudx,dudy,dudz)
     deallocate(up)
     
     allocate(omega(n1,n2do+1,n3,3))
     call instvorticity(dudz,dudy,dudx,omega)

     allocate(wxprime(n1,n2do+1,n3),wyprime(n1,n2do+1,n3),wzprime(n1,n2do+1,n3))
     
     call fluct3Dmean(omega(:,:,:,1),wztavg,wzprime)
     call fluct3Dmean(omega(:,:,:,2),wytavg,wyprime)
     call fluct3Dmean(omega(:,:,:,3),wxtavg,wxprime)
     
     deallocate(omega,dudx,dudy,dudz)

     allocate(wxprime2(n1,n2do+1,n3),wyprime2(n1,n2do+1,n3),wzprime2(n1,n2do+1,n3))

     wxprime2=wxprime*wxprime
     wyprime2=wyprime*wyprime
     wzprime2=wzprime*wzprime
     deallocate(wxprime,wyprime,wzprime)
     
     CALL loopAdd3DAry(wxprime2,wxrms)
     CALL loopAdd3DAry(wyprime2,wyrms)
     CALL loopAdd3DAry(wzprime2,wzrms)
     deallocate(wxprime2,wyprime2,wzprime2)
     
  END DO

  inv=1.0/real(timestcount)
  
  wxrms=sqrt(inv*wxrms)
  wyrms=sqrt(inv*wyrms)
  wzrms=sqrt(inv*wzrms)
  
  call sendrecv3dwrite(wxrms,1,'wxrms_3d.dat')
  call sendrecv3dwrite(wyrms,2,'wyrms_3d.dat')
  call sendrecv3dwrite(wzrms,3,'wzrms_3d.dat')
  
  if (ibs==0)then
     ! computing average over x-direction
     allocate(wxrmstx(n1,n2do+1),wyrmstx(n1,n2do+1),wzrmstx(n1,n2do+1))
  
     CALL spatialAvg3D(wxrms,3,wxrmstx)
     CALL spatialAvg3D(wyrms,3,wyrmstx)
     CALL spatialAvg3D(wzrms,3,wzrmstx)
     
     DEALLOCATE(wxrms,wyrms,wzrms)

  ! computing average over z-direction
     ALLOCATE(wxrmstxz(n2do+1),wyrmstxz(n2do+1),wzrmstxz(n2do+1))

     CALL spatialAvg2D(wxrmstx,1,wxrmstxz)
     CALL spatialAvg2D(wyrmstx,1,wyrmstxz)
     CALL spatialAvg2D(wzrmstx,1,wzrmstxz)
     
     deallocate(wxrmstx,wyrmstx,wzrmstx)
  

     ! print y-coordinate
     IF(mynode==0)THEN
        CALL printVector(yp(1:),'ycoord.dat')
     END IF
     ! print mean values
     stime=MPI_WTIME()
     CALL senRev1dWrite(wxrmstxz,1,'wx_rms_txz.dat')
     CALL senRev1dWrite(wyrmstxz,2,'wy_rms_txz.dat')
     CALL senRev1dWrite(wzrmstxz,3,'wz_rms_txz.dat')

     etime=MPI_WTIME()
     if (mynode == 0) then
        write(*,*)'time elapsed for data write',etime-stime
     end if
     DEALLOCATE(wxrmstxz,wyrmstxz,wzrmstxz)
  end if
  
  CALL MPI_FINALIZE(ierr)
END PROGRAM vorticityprogram
