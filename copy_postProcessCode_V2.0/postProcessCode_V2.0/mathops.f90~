!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!! This modules of this file contains all the mathematical operations !!!!!!!
!!!!! required for the code implementations                              !!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!****************************************************************************!!
!!****************************************************************************!!
!! This module includes all the derivatives input and out put arrays are 3D   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!module derivatives
!  implicit none
!contains
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This subroutine calculates the first derivative of any variable over the !!!!
!! 3D domain. The input vaiable array is 3D and the coordinate array is 1D  !!!!
!! The output 3D array contains the derivative                              !!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
!  subroutine fstdervt_3d(u,x,dim,method,dudx)
!    implicit none
    
!    real*8          ,intent(in) ,dimension(:,:,:) ::u
!    real*8          ,intent(in) ,dimension(:)     ::x
!    integer         ,intent(in)                   ::dim
!    character(LEN=*),intent(in)                   ::method
!    real*8          ,intent(out),dimension(:,:,:) ::dudx
!    integer                                       ::d1,d2,d3,i,j,k,dimx
!    real*8, allocatable, dimension(:)             ::inv_x
    
!    d1=size(u,1)
!    d2=size(u,2)
!    d3=size(u,3)

!    dimx=size(x,1)

!    do i=2,dimx-1
!       inv_x(i)=1.0/(x(i+1)-x(i-1))
!    end do
    
!    if (method=='cen') then
!       if (dim==1)then
!          do i= 2,d1-1
!             dudx(i,:,:)=(u(i+1,:,:)-u(i-1,:,:))*inv_x(i)
!          end do
!       elseif(dim==2) then
!          do j= 2,d1-1
!             dudx(:,j,:)=(u(:,j+1,:)-u(:,j-1,:))*inv_x(j)
!          end do
!       elseif(dim==3) then
!          do k= 2,d3-1
!             dudx(:,:,k)=(u(:,:,k+1)-u(:,:,k-1))*inv_x(k)
!          end do
!       end if
!    end if
!  end subroutine fstdervt_3d

!end module derivatives

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This module contains subroutines that compute eigenvalues of different     !!
!! matrices.                                                                  !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


module eigenvalues
  implicit none
contains
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! This subroutine computes the eigenvalues of a real symmetric matrix.!!!!!!!
!!!! Routines from intel mkl library is used for the optimized performance !!!!!
!!!! of the code when it is used on intel processors.                       !!!!
!!!! INPUTS                                                                 !!!!
!!!! matx: This should be a real symmetric matrix                           !!!!
!!!! jobz: A character variable that decide whether eigenvectors should be  !!!!
!!!!       computed.                                                        !!!!
!!!!       jobz = 'V' - when eigenvectors need to be computed               !!!!
!!!!       jobz = 'N' - when eigenvectors are not computed. Only eigenvalues !!!
!!!!                    are computed                                        !!!!
!!!! uplo: This character variable tells whether the input is upper         !!!!
!!!!       or lower triangular part of the symmetric matrix.                !!!!
!!!!       uplo = 'U' - upper triangular part is fed.                       !!!!
!!!!       uplo = 'L' - lower triangular part is fed.                       !!!!
!!!!                                                                        !!!!
!!!! OUTPUTS                                                                !!!!
!!!! evec : 2D array that contains eigenvectors                             !!!!
!!!! eval : 1D array that contains eigenvalues. Eignevalues are ordered in  !!!!
!!!!        ascending order.                                                !!!!  
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine symmatxeignv(matx,jobz,uplo,evec,eval)
    implicit none

    include 'mkl.fi'
    !  include 'lapack.f90'
    real*8          ,intent(in) , dimension(:,:)  ::matx
    character(len=1),intent(in)                   ::jobz,uplo
    real*8          ,intent(out), dimension(:,:)  ::evec
    real*8          ,intent(out), dimension(:)    ::eval
    ! define variable that are required for mkl routine
    integer                          :: n,lda,lwork,liwork,info,i,j
    real*8,allocatable,dimension(:,:):: a
    real*8,allocatable,dimension(:)  :: work,w
    integer,allocatable,dimension(:) :: iwork
    ! first find the order of the matrix
    n=size(matx,1)

!    write(*,*)'order of the matrix (n) = ',n

    lda=max(1,n)

 !   write(*,*)'leading dimension of the matrix (lda) = ',lda

    if(n.gt.1)then
       if(jobz=='N')then
          lwork=2*n+1
          liwork=1
       elseif(jobz=='V')then
          lwork=2*n*n+6*n+1
          liwork=5*n+3
       end if
    else
       lwork=1
       liwork=1
    end if

    allocate(a(lda,max(1,n)),work(lwork),w(lda),iwork(liwork))
    !define matrix a

    if (uplo=='U')then
       do j=1,n
          do i=1,j
             a(i,j)=matx(i,j)
          end do
       end do
    elseif (uplo=='L') then
       do j=1,n
          do i=j,n
             a(i,j)=matx(i,j)
          end do
       end do
    end if

    call dsyevd(jobz,uplo,n,a,lda,w,work,lwork,iwork,liwork,info)

    evec=a
    eval=w
    deallocate(a,w,work,iwork)
  end subroutine symmatxeignv
end module eigenvalues

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! This module contains subroutines that are used to integrate functions!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
module integration
  implicit none
contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! This subroutine tripple integrate a 3D function over its all the      !!!!
!!!!!! dimensions of the array.                                              !!!!
!!!!!!                                                                       !!!!
!!!!!! INPUTS:                                                               !!!!
!!!!!!       func3d  : 3d array of elements that show the value              !!!!
!!!!!!                 of the function                                       !!!!
!!!!!!       x1,x2,x3: coordinate arrays in three directions                 !!!! 
!!!!!!       dim1    : dimension of the 3d array over which the 1st          !!!!
!!!!!!                 integration is carried out.                           !!!!
!!!!!!       dim2    : dimension of the 2d array resulted from the 1st       !!!!
!!!!!!                 integration over which the 2nd integration is         !!!!
!!!!!!                 carried out.                                          !!!!
!!!!!! Note: x1 and x2 should be consistent with dim1 and dim2               !!!!
!!!!!!                                                                       !!!!
!!!!!! OUTPUTS:                                                              !!!!
!!!!!!        sumd: the result of the 3D integration.                        !!!!
!!!!!! Other variables:                                                      !!!! 
!!!!!!        sum2d: 2D array which is used to store the resultant 2D array  !!!!
!!!!!!               from the 1st integration.                               !!!!
!!!!!!        sum1d: 1D array which is used to store the resultant 1d array  !!!!
!!!!!!               from the 2nd integration.                               !!!!
!!!!!!       d1,d2,d3: dimensions of the 3D array                            !!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine trapz3d_sum(func3d,x1,x2,x3,dim1,dim2,sumd)
    implicit none
    
    real*8,intent(in),dimension(:,:,:)::func3d
    real*8,intent(in),dimension(:)    ::x1,x2,x3
    integer,intent(in)                ::dim1,dim2
    real*8,intent(out)                ::sumd

    real*8,allocatable,dimension(:,:) ::sum2d
    integer                           ::d1,d2,d3
    
    ! find the sizes of the input 3D array
    d1=size(func3d,1)
    d2=size(func3d,2)
    d3=size(func3d,3)

    ! allocate sum2d and sum1d arrays according to
    ! dim1 and dim2
    
    if(dim1==1)then
       allocate(sum2d(d2,d3))
    elseif(dim1==2)then
       allocate(sum2d(d1,d3))
    else
       allocate(sum2d(d1,d2))
    end if
    
    ! 1st integration 3D array to 2D array
    call trapz3d_2dsum(func3d,x1,dim1,sum2d)
    ! 2nd integration 2D array to 1D array
    call trapz2d_sum(sum2d,x1,x2,dim2,sumd)
    ! 3rd integration 1D array to a scalar
   ! call trapz1d_sum(sum1d,x3,sumd)
  end subroutine trapz3d_sum

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! This subroutine double integrate a 2D function over its all the       !!!!
!!!!!! dimensions of the array.                                              !!!!
!!!!!!                                                                       !!!!
!!!!!! INPUTS:                                                               !!!!
!!!!!!       func2d  : 2d array of elements that show the value              !!!!
!!!!!!                 of the function                                       !!!!
!!!!!!       x1,x2   : coordinate arrays in two directions.                  !!!! 
!!!!!!       dim1    : dimension of the 2d array over which the 1st          !!!!
!!!!!!                 integration is carried out.                           !!!!
!!!!!! Note: x1should be consistent with dim1.                               !!!!
!!!!!!                                                                       !!!!
!!!!!! OUTPUTS:                                                              !!!!
!!!!!!        sumd: the result of the 3D integration.                        !!!!
!!!!!! Other variables:                                                      !!!! 
!!!!!!                                                                       !!!!
!!!!!!        sum1d: 1D array which is used to store the resultant 1d array  !!!!
!!!!!!               from the 1st integration.                               !!!!
!!!!!!        d1,d2: dimensions of the 2D array.                             !!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine trapz2d_sum(func2d,x1,x2,dim1,sumd)
    implicit none
    
    real*8,intent(in),dimension(:,:)::func2d
    real*8,intent(in),dimension(:)    ::x1,x2
    integer,intent(in)                ::dim1
    real*8,intent(out)                ::sumd

    real*8,allocatable,dimension(:)   ::sum1d
    integer                           ::d1,d2
    
    ! find the sizes of the input 2D array
    d1=size(func2d,1)
    d2=size(func2d,2)

    ! allocate sum1d and sum1d arrays according to dim
    
    if(dim1==1)then
       allocate(sum1d(d2))
    else
       allocate(sum1d(d1))
    end if
    
    ! 1st integration 2D array to 1D array
    call trapz2d_1dsum(func2d,x1,dim1,sum1d)
    ! 2nd integration 1D array to a scalar
    call trapz1d_sum(sum1d,x2,sumd)
  end subroutine trapz2d_sum
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! This subroutine integrate a 3D function over his 3rd dimension of the!!!!!
!!!!!! array.                                                                !!!!
!!!!!!                                                                       !!!!
!!!!!! INPUTS:                                                               !!!!
!!!!!!       func3d: 3d array of elements that show the value of the function!!!!
!!!!!!       x     : coordinate array                                        !!!! 
!!!!!!       dim   : dimension of the array over which the integration is    !!!!
!!!!!!               carried out.                                            !!!!
!!!!!!                                                                       !!!!
!!!!!! OUTPUTS:                                                              !!!!
!!!!!!        sum2d: 2d array that shows the summation over the 3rd dimension!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine trapz3d_2dsum(func3d,x,dim,sum2d)
    implicit none
    real*8,intent(in),dimension(:,:,:)::func3d
    real*8,intent(in),dimension(:)::x
    integer,intent(in)::dim
    real*8,intent(out),dimension(:,:)::sum2d
    integer::i,d1,d2,d3
    d1=size(func3d,1)
    d2=size(func3d,2)
    d3=size(func3d,3)
    
    sum2d=0.0
    if(dim==1)then
       do i=1,d1-1
          sum2d=sum2d+0.5*(x(i+1)-x(i))*(func3d(i,:,:)+func3d(i+1,:,:))
       end do
    elseif(dim==2)then
       do i=1,d2-1
          sum2d=sum2d+0.5*(x(i+1)-x(i))*(func3d(:,i,:)+func3d(:,i+1,:))
       end do
    else
       do i=1,d3-1
          sum2d=sum2d+0.5*(x(i+1)-x(i))*(func3d(:,:,i)+func3d(:,:,i+1))
       end do
    end if
  end subroutine trapz3d_2dsum
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! This subroutine integrate a 2D function over his 3rd dimension of the!!!!!
!!!!!! array.                                                                !!!!
!!!!!!                                                                       !!!!
!!!!!! INPUTS:                                                               !!!!
!!!!!!       func2d: 2d array of elements that show the value of the function!!!!
!!!!!!       x     : coordinate array                                        !!!! 
!!!!!!       dim   : dimension of the array over which the integration is    !!!!
!!!!!!               carried out.                                            !!!!
!!!!!!                                                                       !!!!
!!!!!! OUTPUTS:                                                              !!!!
!!!!!!        sum1d: 1d array that shows the summation over the 3rd dimension!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine trapz2d_1dsum(func2d,x,dim,sum1d)
    implicit none
    real*8,intent(in),dimension(:,:)::func2d
    real*8,intent(in),dimension(:)::x
    integer,intent(in)::dim
    real*8,intent(out),dimension(:)::sum1d
    integer::i,d1,d2
    d1=size(func2d,1)
    d2=size(func2d,2)
    
    sum1d=0.0
    if(dim==1)then
       do i=1,d1-1
          sum1d=sum1d+0.5*(x(i+1)-x(i))*(func2d(i,:)+func2d(i+1,:))
       end do
    else
       do i=1,d2-1
          sum1d=sum1d+0.5*(x(i+1)-x(i))*(func2d(:,i)+func2d(:,i+1))
       end do
    end if
  end subroutine trapz2d_1dsum

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! This subroutine integrate a 1D function over his 3rd dimension of the!!!!!
!!!!!! array.                                                                !!!!
!!!!!!                                                                       !!!!
!!!!!! INPUTS:                                                               !!!!
!!!!!!       func1d: 1d array of elements that show the value of the function!!!!
!!!!!!       x     : coordinate array                                        !!!! 
!!!!!!       dim   : dimension of the array over which the integration is    !!!!
!!!!!!               carried out.                                            !!!!
!!!!!!                                                                       !!!!
!!!!!! OUTPUTS:                                                              !!!!
!!!!!!        sumd: 1d array that shows the summation over the 3rd dimension!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine trapz1d_sum(func1d,x,sumd)
    implicit none
    real*8,intent(in),dimension(:)::func1d
    real*8,intent(in),dimension(:)::x
    real*8,intent(out)::sumd
    integer::i,d1
    d1=size(func1d,1)
    
    sumd=0.0
    do i=1,d1-1
       sumd=sumd+0.5*(x(i+1)-x(i))*(func1d(i)+func1d(i+1))
    end do
  end subroutine trapz1d_sum


end module integration




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! SUBROUTINE oneDFFT3Dary: this subroutine computes 1D fourier transformation!!
!!                          when 3D array is supplied. This uses subroutines  !!
!!                          of FFTPACK5.1 package. The out put is also a 3D   !!
!!                          array. Transformation takes place only along the  !!
!!                          first dimension of the array.                     !!
!! INPUTS:                                                                    !!
!! D1,D2,D3: INTEGER     : dimensions of the 3d array in z,y, and x directions!!
!!                         respectively                                       !!
!! ary3d : REAL*8        : 3d arry with dimensions D1,D2, and D3.             !!
!!                                                                            !!
!! OUTPUTS:                                                                   !!
!! FTary3d:COMPLEX(KIND=8): 3d array that contain fourier coefficients        !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

SUBROUTINE oneDFFT3Dary(ary3d,D1,D2,D3,L,FTary3d)
  IMPLICIT NONE
  INTEGER,INTENT(IN)::D1,D2,D3,L
  REAL*8,INTENT(IN)::ary3d(D1,D2,D3)
  COMPLEX(KIND=8),INTENT(OUT)::FTary3d(L,D2,D3)
  INTEGER :: LENSAV,LENWRK,IER,INC,LENC,I,J,K
  REAL*8,ALLOCATABLE,DIMENSION(:)::WSAVE,WORK
  COMPLEX(kind=8),ALLOCATABLE,DIMENSION(:)::C
  write(*,*)'computing 1D fft'
  INC=1
  LENSAV=2*L+INT(LOG(REAL(L))/LOG(2.0))+4
  LENWRK=2*L
  LENC=INC*(L-1)+1
  ALLOCATE(WORK(LENWRK))
  ALLOCATE(WSAVE(LENSAV))
  ALLOCATE(C(LENC))
  CALL CFFT1I(L,WSAVE,LENSAV,IER)
  IF(L>D1)THEN
     DO J=1,D2
        DO K=1,D3
           DO I=1,L
              IF(I<=D1)THEN
                 C(I)=CMPLX(ary3d(I,J,K))
              ELSE
                 C(I)=CMPLX(0.)
              END IF
           END DO
           CALL CFFT1F(L,INC,C,LENC,WSAVE,LENSAV,WORK,LENWRK,IER)
           DO I=1,L
              FTary3d(I,J,K)=C(I)
           END DO
        END DO
     END DO
  ELSE
     DO J=1,D2
        DO K=1,D3
           DO I=1,L
              C(I)=CMPLX(ary3d(I,J,K))
           END DO
           CALL CFFT1F(L,INC,C,LENC,WSAVE,LENSAV,WORK,LENWRK,IER)
           DO I=1,L
              FTary3d(I,J,K)=C(I)
           END DO
        END DO
     END DO
  END IF
  DEALLOCATE(WORK)
  DEALLOCATE(WSAVE)
  DEALLOCATE(C)
END SUBROUTINE oneDFFT3Dary


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! SUBROUTINE oneDInvFFT3Dary: this subroutine computes 1D fourier            !!
!!                             invers transformation when 3D array of fourier !!
!!                             coefficinets  is supplied.                     !!
!!                             This uses subroutines                          !!
!!                          of FFTPACK5.1 package. The out put is also a 3D   !!
!!                          array. Transformation takes place only along the  !!
!!                          first dimension of the array.                     !!
!! INPUTS:                                                                    !!
!! D1,D2,D3: INTEGER     : dimensions of the 3d array in z,y, and x directions!!
!!                         respectively                                       !!
!! FTary3d : COMPLEX(KIND=8): 3d arry with dimensions D1,D2, and D3.          !!
!!                                                                            !!
!! OUTPUTS:                                                                   !!
!! invFTary3d: REAL*8: 3d array that contain fourier coefficients             !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

SUBROUTINE oneDInvFFT3Dary(FTary3d,D1,D2,D3,invFTary3d)
  IMPLICIT NONE
  INTEGER,INTENT(IN)::D1,D2,D3
  REAL*8,INTENT(OUT)::invFTary3d(D1,D2,D3)
  COMPLEX(KIND=8),INTENT(IN)::FTary3d(D1,D2,D3)
  INTEGER :: LENSAV,LENWRK,IER,INC,LENC,I,J,K
  REAL*8,ALLOCATABLE,DIMENSION(:)::WSAVE,WORK
  COMPLEX(kind=8),ALLOCATABLE,DIMENSION(:)::C
  INC=1
  LENSAV=2*D1+INT(LOG(REAL(D1))/LOG(2.0))+4
  LENWRK=2*D1
  LENC=INC*(D1-1)+1
  ALLOCATE(WORK(LENWRK))
  ALLOCATE(WSAVE(LENSAV))
  ALLOCATE(C(LENC))
  CALL CFFT1I(D1,WSAVE,LENSAV,IER)
  DO J=1,D2
     DO K=1,D3
        DO I=1,D1
           C(I)=CMPLX(FTary3d(I,J,K))
        END DO
        CALL CFFT1B(D1,INC,C,LENC,WSAVE,LENSAV,WORK,LENWRK,IER)
        DO I=1,D1
           invFTary3d(I,J,K)=REAL(C(I))
        END DO
     END DO
  END DO
  DEALLOCATE(WORK)
  DEALLOCATE(WSAVE)
  DEALLOCATE(C)
END SUBROUTINE oneDInvFFT3Dary




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! SUBROUTINE oneDInvFFTShift3Dary: This subroutine shifts the low wavenumber !!
!!                                  coefficients to the middle of the spectrym!!
!! INPUTS:                                                                    !!
!! D1,D2,D3: INTEGER     : dimensions of the 3d array in z,y, and x directions!!
!!                         respectively                                       !!
!! invFTary3d : COMPLEX(KIND=8): the array contains inverse fourier trasformed!!
!!                               coefficients.                                !!
!! OUTPUTS:                                                                   !!
!! shft3dary: REAL*8: array with shifted spectrum                             !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

SUBROUTINE oneDinvFFTShift3Dary(invFTary3d,D1,D2,D3,shft3dary)
  IMPLICIT NONE
  INTEGER,INTENT(IN)::D1,D2,D3
  REAL*8,INTENT(IN)::invFTary3d(D1,D2,D3)
  REAL*8,INTENT(OUT)::shft3dary(D1,D2,D3)
  INTEGER::I,J,K
  DO I=1,D1
     DO J=1,D2
        DO K=1,D3
           IF(I<=D1/2)THEN
              shft3dary(I,J,K)=2.0*invFTary3d(I+D1/2,J,K)
           ELSE
              shft3dary(I,J,K)=2.0*invFTary3d(I-D1/2,J,K)
           END IF
        END DO
     END DO
  END DO
END SUBROUTINE oneDinvFFTShift3Dary
