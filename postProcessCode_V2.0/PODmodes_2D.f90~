!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This module contains subroutines which are used to compute POD            !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
module comppod
  implicit none

contains
  
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!subroutine fluc_xyplane: extract fluctuating field from 2D plane!!!!!!!
  !!!                                                                       !!!! 
  !!! INPUTS:                                                               !!!!
  !!!       fluc3d: fluctuation field array 3d                              !!!!
  !!!       x0    : the coordiante at which the data is extracted           !!!!
  !!!       plane : this specifies the 2D plane (xy =1, yz=2,xz =3)         !!!!
  !!!       tstp  : the time step at which the data is taken                !!!!
  !!! OUTPUT:                                                               !!!!
  !!!       fluc2d: array with 2D plane data for each time step.            !!!!
  !!!               the 3rd dimension holds the time step data.             !!!!
  !!!                                                                       !!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine fluc_2Dplane(fluc3d,x0,plane,tstp,fluc2d)
    implicit none
    integer,intent(in)::x0,plane,tstp
    real*8,intent(in),dimension(:,:,:)::fluc3d
    real*8,intent(out),dimension(:,:,:)::fluc2d
    integer :: i,j,k,d1,d2,d3
    
    d1=size(fluc3dary,1)
    d2=size(fluc3dary,2)
    d3=size(fluc3dary,3)
    ! xy=1 ,yz=2, xz=3
    if(plane==1)then
       do k=1,d3
          do j=1,d2
             fluc2d(j,k,tstp)=fluc3d(x0,j,k)
          end do
       end do
    elseif(plane==2) then
       do j=1,d2
          do i=1,d1             
             fluc2d(i,j,tstp)=fluc3d(i,j,x0)
          end do
       end do
    else
       do k=1,d3
          do i=1,d1             
             fluc2d(i,k,tstp)=fluc3d(i,x0,k)
          end do
       end do
    end if
  end subroutine fluc_2Dplane

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !!!!!!! This subroutine computes the kernal matrix that is used to find !!!!!!
 !!!!!!! eigenvalues and eigen functions.                                !!!!!!
 !!!!!!!                                                                 !!!!!!
 !!!!!!! INPUTS:                                                         !!!!!!
 !!!!!!!      u,v,w = 3d arrays of fluctuating velocity components in    !!!!!!
 !!!!!!!              in 3 directions.                                   !!!!!!
 !!!!!!!      x,y,z = coordinate arrays in 3 directions                  !!!!!!
 !!!!!!!      iplane= integer that defines the plane in which the data   !!!!!!
 !!!!!!!              is obtained. (xy=1, yz=2, xz=3)                    !!!!!!
 !!!!!!!                                                                 !!!!!!
 !!!!!!! OUTPUT:                                                         !!!!!!
 !!!!!!!          c = kernal matrix                                      !!!!!!
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


  subroutine compkernal(u,v,w,x,y,z,iplane,c)
    use integration
    use mpi
    use writedata
    use mpivariables
    implicit none
    real*8,intent(in),dimension(:,:,:):: u,v,w
    real*8,intent(in),dimension(:)    :: x,y,z
    integer,intent(in)                :: iplane
    real*8,intent(out),dimension(:,:) :: c
    
    integer                           :: d1,d2,d3,tm,tn,alocst
    real*8,allocatable,dimension(:,:) :: u2sum
    real*8                            :: prosum,inv

    d1=size(u,1)
    d2=size(u,2)
    d3=size(u,3)
    
    do tm=1,d3
       do tn=1,d3
          allocate(u2sum(d1,d2),stat=alocst)
          if(alocst/=0)stop "****** NOT ENOUGH MEMORY *******"
          
          u2sum(:,:)=u(:,:,tm)*u(:,:,tn)+v(:,:,tm)*v(:,:,tn)+w(:,:,tm)*w(:,:,tn)
          
          if(iplane==1)then
             call trapz2d_sum(u2sum,y,x,2,prosum)
          elseif(iplane==2)then
             call trapz2d_sum(u2sum,z,y,1,prosum)
          else
             call trapz2d_sum(u2sum,z,x,2,prosum)
          end if
          
          deallocate(u2sum)

          call MPI_ALLREDUCE(prosum,c(tm,tn),1,MPI_REAL8,MPI_SUM,MPI_COMM_WORLD,ierr)
          
       end do
    end do
          
    inv=1.0/real(d3)
    c=inv*c
    ! print kernal matrix
    if (mynode==0)then
       if(iplane==1)then
          call print2DMatx(c,d3,d3,'kernalMatx_xy.dat')
       elseif (iplane==2)
          call print2DMatx(c,d3,d3,'kernalMatx_yz.dat')
       else
          call print2DMatx(c,d3,d3,'kernalMatx_zx.dat')
       end if
    end if
  end subroutine compkernal

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! This subroutine computes POD modes.                                       !
!!!       1. First the 3D velocity array is converted to a 2D array (reshape).!
!!!       2. Then use matmul function to do matrix mutiplication with evec    !
!!!       3. finally 2D array obtained from multiplication is reshaped to a   !
!!!          3D array.                                                        !
!!!                                                                           !
!!! INPUTS:                                                                   !
!!!      u : instantaneous velocity fluctuation array                         ! 
!!!    evec: eigenvectors array                                               !
!!!                                                                           !
!!! OUTPUT:                                                                   !
!!!     phi : 3D array that contain eigenfuctions or POD modes pertaining to  !
!!!           the given velocity field.                                       !
!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine podModes_2Dplane(u,evec,phi)
    implicit none
    real*8,intent(in),dimension(:,:,:) :: u
    real*8,intent(in),dimension(:,:)   :: evec
    real*8,intent(out),dimension(:,:,:):: phi
    
    integer                            :: d1,d2,d3
    
    d1=size(u,1)
    d2=size(u,2)
    d3=size(u,3)
    

    phi=reshape(matmul(reshape(u,(/d1*d2,d3/),evec)),(/d1,d2,d3/))
  end subroutine podModes_2Dplane

  subroutine norm_modes_2Dplane(x,y,z,iplane,phi,shi,chi)
    use mpi
    use mpivariables
    use writedata
    use integration
    implicit none

    real*8,intent(inout),dimension(:,:,:)::phi,shi,chi
    real*8,intent(in),dimension(:)       ::x,y,z
    integer,intent(in)                   ::iplane
    real*8,allocatable,dimension(:,:)    ::phisum
    real*8,allocatable,dimension(:)      ::norm2
   
    integer                              ::d1,d2,d3,alocst
    real*8                               ::prosum,norm
    
    d1=size(phi,1)
    d2=size(phi,2)
    d3=size(phi,3)

    allocate(norm2(d3),stat=alocst)
    if(alocst/=0)stop "****** NOT ENOUGH MEMORY *******"

    do m=1,d3
       allocate(phisum(d1,d2),stat=alocst)
       if(alocst/=0)stop "****** NOT ENOUGH MEMORY *******"
          
       phisum(:,:)=phi(:,:,m)*phi(:,:,m)+shi(:,:,m)*shi(:,:,m)+chi(:,:,m)*chi(:,:,m)
          
       if(iplane==1)then
          call trapz2d_sum(phisum,y,x,2,prosum)
       elseif(iplane==2)then
          call trapz2d_sum(phisum,z,y,1,prosum)
       else
          call trapz2d_sum(phisum,z,x,2,prosum)
       end if
          
       deallocate(phisum)

       call MPI_ALLREDUCE(prosum,norm2(m),1,MPI_REAL8,MPI_SUM,MPI_COMM_WORLD,ierr)
       
       norm=1.0/sqrt(norm2(m))
       phi(:,:,m)=phi(:,:,m)*norm
       shi(:,:,m)=shi(:,:,m)*norm
       chi(:,:,m)=chi(:,:,m)*norm
       
    end do

    !printing norm2

    if (mynode==0)then
       if (iplane==1)then
          call printVector(norm2,d3,'normSquare_xyPlane.dat')
       elseif(iplane==2)then
          call printVector(norm2,d3,'normSquare_yzPlane.dat')
       else
          call printVector(norm2,d3,'normSquare_xzPlane.dat')
       end if
    end if
    deallocate(norm2)

  end subroutine norm_modes_2Dplane
  
  subroutine checkModeOrthog_2Dpln(x,y,z,iplane,phi,shi,chi)
    use mpivariables
    use integration
    use writedata
    use mpi
  
    implicit none
  
    real*8,intent(in),dimension(:,:,:) :: phi,shi,chi
    real*8,intent(in),dimension(:)     :: x,y,z
    integer,intent(in)                 :: iplane
    
    real*8,dimension(:,:),allocatable::phisum
    real*8,dimension(:,:),allocatable::norm2
    REAL*8::prosum
    integer::d1,d2,d3,m,n,allocStat

    d1=size(phi,1)
    d2=size(phi,2)
    d3=size(phi,3)

    ! Finding the L2 norm of each mode
    allocate(norm2(d3,d3))
    do m=1,d3
       do n=1,d3
          allocate(phisum(d1,d2),STAT=allocStat)
          if(allocStat/=0)STOP "*****NOT ENOUGH MEMORY*****"
          phisum=phi(:,:,m)*phi(:,:,n)+shi(:,:,m)*shi(:,:,n)+chi(:,:,m)*chi(:,:,n)
          
          if(iplane==1)then
             call trapz2d_sum(phisum,y,x,2,prosum)
          elseif(iplane==2)then
             call trapz2d_sum(phisum,z,y,1,prosum)
          else
             call trapz2d_sum(phisum,z,x,2,prosum)
          end if
        
          deallocate(phisum)
          call MPI_ALLREDUCE(prosum,norm2(m,n),1,MPI_REAL8,MPI_SUM,MPI_COMM_WORLD,ierr)
       end do
    end do
    if(mynode==0)then
       if(iplane==1)then
          call print2DMatx(norm2,d3,d3,'checkorthog_xy.dat')
       elseif(iplane==2)THEN
          call print2DMatx(norm2,d3,d3,'checkorthog_yz.dat')
       else
          call print2DMatx(norm2,d3,d3,'checkorthog_xz.dat')
       end if
    end if
    deallocate(norm2)
  end subroutine CheckModeOrthog_2Dpln

  subroutine podcoe_2d(x,y,z,u,v,w,modeu,modev,modew,coe)
    use mpivariables
    use mpi
    use writedata
    use integration
    implicit none
    
    real*8,intent(in),dimension(:,:,:):: u,v,w,modeu,modev,modew
    real*8,intent(in),dimension(:)    :: x,y,z
    real*8,intent(out),dimension(:,:) :: coe

    real*8,dimension(:,:),allocatable :: modesum
    real*8                            :: prosum
    integer                           :: m,t,alocst

    d1=size(phi,1)
    d2=size(phi,2)
    d3=size(phi,3)

    do t=1,d3
       do m=1,d3
          allocate(modesum(d1,d2),stat=alocst)
          if(alocst/=0)stop"****** NOT ENOUGH MEMORY ********"
          modesum=modeu(:,:,m)*u(:,:,t)+modev(:,:,m)*v(:,:,t)+modew(:,:,m)*w(:,:,t)
          
          if(iplane==1)then
             call trapz2d_sum(modesum,y,x,2,prosum)
          elseif(iplane==2)then
             call trapz2d_sum(modesum,z,y,1,prosum)
          else
             call trapz2d_sum(modesum,z,x,2,prosum)
          end if
        
          deallocate(modesum)
          
          call MPI_ALLREDUCE(prosum,coe(t,m),1,MPI_REAL8,MPI_SUM,MPI_COMM_WORLD,ierr)
       
       end do
    end do
    
    if(mynode==0)then
       if(iplane==1)then
          call print2DMatx(coe,d3,d3,'coeMatx_xy.dat')
       elseif(iplane==2)THEN
          call print2DMatx(coe,d3,d3,'coeMatx_yz.dat')
       else
          call print2DMatx(coe,d3,d3,'coeMatx_xz.dat')
       end if
    end if
       
          
end module comppod

